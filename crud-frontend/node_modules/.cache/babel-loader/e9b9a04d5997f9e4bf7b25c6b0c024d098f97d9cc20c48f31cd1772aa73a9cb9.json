{"ast":null,"code":"// src/services/api.js\nimport axios from 'axios';\nconst AUTH_URL = 'http://127.0.0.1:8000/auth'; // Authentication base URL\nconst API_URL = 'http://127.0.0.1:8000/api'; // API base URL for birthdays\n\n// Function to register a new user\nexport const registerUser = async userData => {\n  try {\n    const response = await axios.post(`${AUTH_URL}/registration/`, userData);\n    return response.data; // Returns the user data from the response\n  } catch (error) {\n    throw error.response.data; // Customize this based on your needs\n  }\n};\n\n// Function to log in a user\nexport const loginUser = async credentials => {\n  try {\n    const response = await axios.post(`${AUTH_URL}/login/`, credentials);\n    return response.data; // Returns the token or user data from the response\n  } catch (error) {\n    throw error.response.data; // Handle the error response\n  }\n};\n\n// Function to fetch birthdays\nexport const fetchBirthdays = async token => {\n  try {\n    const response = await axios.get(`${API_URL}/birthdays/`, {\n      headers: {\n        Authorization: `oken ${token}`\n      } // Adjust based on your authentication method\n    });\n    return response.data; // Returns the list of birthdays\n  } catch (error) {\n    throw error.response.data; // Handle the error response\n  }\n};\n\n// Function to create a new birthday\nexport const createBirthday = async (birthdayData, token) => {\n  try {\n    const response = await axios.post(`${API_URL}/birthdays/`, birthdayData, {\n      headers: {\n        Authorization: `Token ${token}`\n      } // Adjust based on your authentication method\n    });\n    return response.data; // Returns the created birthday data\n  } catch (error) {\n    throw error.response.data; // Handle the error response\n  }\n};\n\n// Function to update a birthday\nexport const updateBirthday = async (birthdayId, birthdayData, token) => {\n  try {\n    const response = await axios.put(`${API_URL}/birthdays/${birthdayId}/`, birthdayData, {\n      headers: {\n        Authorization: `Token ${token}`\n      } // Adjust based on your authentication method\n    });\n    return response.data; // Returns the updated birthday data\n  } catch (error) {\n    throw error.response.data; // Handle the error response\n  }\n};\n\n// Function to delete a birthday\nexport const deleteBirthday = async (birthdayId, token) => {\n  try {\n    const response = await axios.delete(`${API_URL}/birthdays/${birthdayId}/`, {\n      headers: {\n        Authorization: `Token ${token}`\n      } // Adjust based on your authentication method\n    });\n    return response.data; // Optionally return a success message or response\n  } catch (error) {\n    throw error.response.data; // Handle the error response\n  }\n};","map":{"version":3,"names":["axios","AUTH_URL","API_URL","registerUser","userData","response","post","data","error","loginUser","credentials","fetchBirthdays","token","get","headers","Authorization","createBirthday","birthdayData","updateBirthday","birthdayId","put","deleteBirthday","delete"],"sources":["/Users/test/crud-frontend-/crud-frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\nimport axios from 'axios';\n\nconst AUTH_URL = 'http://127.0.0.1:8000/auth'; // Authentication base URL\nconst API_URL = 'http://127.0.0.1:8000/api'; // API base URL for birthdays\n\n// Function to register a new user\nexport const registerUser = async (userData) => {\n    try {\n        const response = await axios.post(`${AUTH_URL}/registration/`, userData);\n        return response.data; // Returns the user data from the response\n    } catch (error) {\n        throw error.response.data; // Customize this based on your needs\n    }\n};\n\n// Function to log in a user\nexport const loginUser = async (credentials) => {\n    try {\n        const response = await axios.post(`${AUTH_URL}/login/`, credentials);\n        return response.data; // Returns the token or user data from the response\n    } catch (error) {\n        throw error.response.data; // Handle the error response\n    }\n};\n\n// Function to fetch birthdays\nexport const fetchBirthdays = async (token) => {\n    try {\n        const response = await axios.get(`${API_URL}/birthdays/`, {\n            headers: { Authorization: `oken ${token}` } // Adjust based on your authentication method\n        });\n        return response.data; // Returns the list of birthdays\n    } catch (error) {\n        throw error.response.data; // Handle the error response\n    }\n};\n\n// Function to create a new birthday\nexport const createBirthday = async (birthdayData, token) => {\n    try {\n        const response = await axios.post(`${API_URL}/birthdays/`, birthdayData, {\n            headers: { Authorization: `Token ${token}` } // Adjust based on your authentication method\n        });\n        return response.data; // Returns the created birthday data\n    } catch (error) {\n        throw error.response.data; // Handle the error response\n    }\n};\n\n// Function to update a birthday\nexport const updateBirthday = async (birthdayId, birthdayData, token) => {\n    try {\n        const response = await axios.put(`${API_URL}/birthdays/${birthdayId}/`, birthdayData, {\n            headers: { Authorization: `Token ${token}` } // Adjust based on your authentication method\n        });\n        return response.data; // Returns the updated birthday data\n    } catch (error) {\n        throw error.response.data; // Handle the error response\n    }\n};\n\n// Function to delete a birthday\nexport const deleteBirthday = async (birthdayId, token) => {\n    try {\n        const response = await axios.delete(`${API_URL}/birthdays/${birthdayId}/`, {\n            headers: { Authorization: `Token ${token}` } // Adjust based on your authentication method\n        });\n        return response.data; // Optionally return a success message or response\n    } catch (error) {\n        throw error.response.data; // Handle the error response\n    }\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}