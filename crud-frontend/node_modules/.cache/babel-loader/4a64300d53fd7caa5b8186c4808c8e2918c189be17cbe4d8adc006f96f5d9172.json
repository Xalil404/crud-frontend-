{"ast":null,"code":"// src/services/api.js\nimport axios from 'axios';\nconst AUTH_URL = 'http://127.0.0.1:8000/auth'; // Authentication base URL\nconst API_URL = 'http://127.0.0.1:8000/api'; // API base URL for birthdays\n\n// Set up Axios instance\nconst api = axios.create({\n  baseURL: API_URL\n});\n\n// Add a request interceptor\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken'); // Retrieve the token from local storage\n  if (token) {\n    config.headers.Authorization = `Token ${token}`; // Assuming your backend uses 'Token' scheme\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Function to register a new user\nexport const registerUser = async userData => {\n  try {\n    const response = await axios.post(`${AUTH_URL}/registration/`, userData);\n    return response.data; // Returns the user data from the response\n  } catch (error) {\n    throw error.response.data; // Customize this based on your needs\n  }\n};\n\n// Function to log in a user\nexport const loginUser = async credentials => {\n  try {\n    const response = await axios.post(`${AUTH_URL}/login/`, credentials);\n    console.log('Login Response:', response.data); // Log the response data\n    // Store user ID in local storage\n    localStorage.setItem('user', response.data.user); // Use 'userId' for consistency\n    console.log('User ID saved:', response.data.user);\n    return {\n      token: response.data.key\n    }; // Return the token\n  } catch (error) {\n    throw error.response.data;\n  }\n};\n\n// Function to fetch birthdays\nexport const fetchBirthdays = async token => {\n  try {\n    const response = await axios.get(`${API_URL}/birthdays/`, {\n      headers: {\n        Authorization: `Token ${token}`\n      } // Adjust based on your authentication method\n    });\n    return response.data; // Returns the list of birthdays\n  } catch (error) {\n    throw error.response.data; // Handle the error response\n  }\n};\n\n// Function to create a new birthday\nexport const createBirthday = async (birthdayData, token) => {\n  try {\n    const response = await axios.post(`${API_URL}/birthdays/`, birthdayData, {\n      headers: {\n        Authorization: `Token ${token}`\n      } // Adjust based on your authentication method\n    });\n    return response.data; // Returns the created birthday data\n  } catch (error) {\n    throw error.response.data; // Handle the error response\n  }\n};\n\n// Function to update a birthday\nexport const updateBirthday = async (birthdayId, birthdayData, token) => {\n  try {\n    const response = await axios.put(`${API_URL}/birthdays/${birthdayId}/`, birthdayData, {\n      headers: {\n        Authorization: `Token ${token}`\n      } // Adjust based on your authentication method\n    });\n    return response.data; // Returns the updated birthday data\n  } catch (error) {\n    throw error.response.data; // Handle the error response\n  }\n};\n\n// Function to delete a birthday\nexport const deleteBirthday = async (birthdayId, token) => {\n  try {\n    const response = await axios.delete(`${API_URL}/birthdays/${birthdayId}/`, {\n      headers: {\n        Authorization: `Token ${token}`\n      } // Adjust based on your authentication method\n    });\n    return response.data; // Optionally return a success message or response\n  } catch (error) {\n    throw error.response.data; // Handle the error response\n  }\n};\n\n// Function to fetch user profile\nexport const fetchUserProfile = async token => {\n  try {\n    const response = await axios.get(`${API_URL}/profile/`, {\n      headers: {\n        Authorization: `Token ${token}`\n      }\n    });\n    return response.data; // Returns the user profile data\n  } catch (error) {\n    throw error.response.data; // Handle the error response\n  }\n};","map":{"version":3,"names":["axios","AUTH_URL","API_URL","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","registerUser","userData","response","post","data","loginUser","credentials","console","log","setItem","user","key","fetchBirthdays","get","createBirthday","birthdayData","updateBirthday","birthdayId","put","deleteBirthday","delete","fetchUserProfile"],"sources":["/Users/test/crud-frontend-/crud-frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\nimport axios from 'axios';\n\nconst AUTH_URL = 'http://127.0.0.1:8000/auth'; // Authentication base URL\nconst API_URL = 'http://127.0.0.1:8000/api'; // API base URL for birthdays\n\n\n\n// Set up Axios instance\nconst api = axios.create({\n    baseURL: API_URL,\n});\n\n// Add a request interceptor\napi.interceptors.request.use((config) => {\n    const token = localStorage.getItem('authToken'); // Retrieve the token from local storage\n    if (token) {\n        config.headers.Authorization = `Token ${token}`; // Assuming your backend uses 'Token' scheme\n    }\n    return config;\n}, (error) => {\n    return Promise.reject(error);\n});\n\n// Function to register a new user\nexport const registerUser = async (userData) => {\n    try {\n        const response = await axios.post(`${AUTH_URL}/registration/`, userData);\n        return response.data; // Returns the user data from the response\n    } catch (error) {\n        throw error.response.data; // Customize this based on your needs\n    }\n};\n\n// Function to log in a user\nexport const loginUser = async (credentials) => {\n    try {\n        const response = await axios.post(`${AUTH_URL}/login/`, credentials);\n        console.log('Login Response:', response.data); // Log the response data\n        // Store user ID in local storage\n        localStorage.setItem('user', response.data.user); // Use 'userId' for consistency\n        console.log('User ID saved:', response.data.user);\n        return { token: response.data.key }; // Return the token\n    } catch (error) {\n        throw error.response.data;\n    }\n};\n\n\n\n\n// Function to fetch birthdays\nexport const fetchBirthdays = async (token) => {\n    try {\n        const response = await axios.get(`${API_URL}/birthdays/`, {\n            headers: { Authorization: `Token ${token}` } // Adjust based on your authentication method\n        });\n        return response.data; // Returns the list of birthdays\n    } catch (error) {\n        throw error.response.data; // Handle the error response\n    }\n};\n\n// Function to create a new birthday\nexport const createBirthday = async (birthdayData, token) => {\n    try {\n        const response = await axios.post(`${API_URL}/birthdays/`, birthdayData, {\n            headers: { Authorization: `Token ${token}` } // Adjust based on your authentication method\n        });\n        return response.data; // Returns the created birthday data\n    } catch (error) {\n        throw error.response.data; // Handle the error response\n    }\n};\n\n// Function to update a birthday\nexport const updateBirthday = async (birthdayId, birthdayData, token) => {\n    try {\n        const response = await axios.put(`${API_URL}/birthdays/${birthdayId}/`, birthdayData, {\n            headers: { Authorization: `Token ${token}` } // Adjust based on your authentication method\n        });\n        return response.data; // Returns the updated birthday data\n    } catch (error) {\n        throw error.response.data; // Handle the error response\n    }\n};\n\n// Function to delete a birthday\nexport const deleteBirthday = async (birthdayId, token) => {\n    try {\n        const response = await axios.delete(`${API_URL}/birthdays/${birthdayId}/`, {\n            headers: { Authorization: `Token ${token}` } // Adjust based on your authentication method\n        });\n        return response.data; // Optionally return a success message or response\n    } catch (error) {\n        throw error.response.data; // Handle the error response\n    }\n};\n\n// Function to fetch user profile\nexport const fetchUserProfile = async (token) => {\n    try {\n        const response = await axios.get(`${API_URL}/profile/`, {\n            headers: { Authorization: `Token ${token}` }\n        });\n        return response.data; // Returns the user profile data\n    } catch (error) {\n        throw error.response.data; // Handle the error response\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}