{"ast":null,"code":"var _jsxFileName = \"/Users/test/crud-frontend-/crud-frontend/src/components/auth/GoogleLoginPage.js\";\nimport React from 'react';\nimport { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GoogleLoginPage = () => {\n  const responseGoogle = response => {\n    console.log(\"Google Response:\", response);\n\n    // Construct user data with token\n    const userData = {\n      token: response.credential\n    };\n\n    // Send token to your Django backend\n    fetch('http://127.0.0.1:8000/api/auth/google/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    }).then(res => res.json()).then(data => {\n      console.log(\"Backend Response:\", data);\n      // Handle successful login (e.g., store token, redirect user)\n      if (data.token) {\n        // Save the token locally or redirect\n        localStorage.setItem('authToken', data.token);\n      }\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(GoogleOAuthProvider, {\n    clientId: \"17966200055-rc9cu06jutt8mo0cqob43vhnejvbltd4.apps.googleusercontent.com\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Google Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n        onSuccess: responseGoogle,\n        onError: () => console.error('Login Failed')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_c = GoogleLoginPage;\nexport default GoogleLoginPage;\nvar _c;\n$RefreshReg$(_c, \"GoogleLoginPage\");","map":{"version":3,"names":["React","GoogleOAuthProvider","GoogleLogin","jsxDEV","_jsxDEV","GoogleLoginPage","responseGoogle","response","console","log","userData","token","credential","fetch","method","headers","body","JSON","stringify","then","res","json","data","localStorage","setItem","catch","error","clientId","children","fileName","_jsxFileName","lineNumber","columnNumber","onSuccess","onError","_c","$RefreshReg$"],"sources":["/Users/test/crud-frontend-/crud-frontend/src/components/auth/GoogleLoginPage.js"],"sourcesContent":["\n\n\nimport React from 'react';\nimport { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\n\nconst GoogleLoginPage = () => {\n    const responseGoogle = (response) => {\n        console.log(\"Google Response:\", response);\n\n        // Construct user data with token\n        const userData = {\n            token: response.credential,\n        };\n\n        // Send token to your Django backend\n        fetch('http://127.0.0.1:8000/api/auth/google/', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(userData),\n        })\n        .then((res) => res.json())\n        .then((data) => {\n            console.log(\"Backend Response:\", data);\n            // Handle successful login (e.g., store token, redirect user)\n            if (data.token) {\n                // Save the token locally or redirect\n                localStorage.setItem('authToken', data.token);\n            }\n        })\n        .catch((error) => {\n            console.error('Error:', error);\n        });\n    };\n\n    return (\n        <GoogleOAuthProvider clientId=\"17966200055-rc9cu06jutt8mo0cqob43vhnejvbltd4.apps.googleusercontent.com\">\n            <div>\n                <h1>Google Login</h1>\n                <GoogleLogin\n                    onSuccess={responseGoogle}\n                    onError={() => console.error('Login Failed')}\n                />\n            </div>\n        </GoogleOAuthProvider>\n    );\n};\n\nexport default GoogleLoginPage;\n"],"mappings":";AAGA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,mBAAmB,EAAEC,WAAW,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvE,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAC1B,MAAMC,cAAc,GAAIC,QAAQ,IAAK;IACjCC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,QAAQ,CAAC;;IAEzC;IACA,MAAMG,QAAQ,GAAG;MACbC,KAAK,EAAEJ,QAAQ,CAACK;IACpB,CAAC;;IAED;IACAC,KAAK,CAAC,wCAAwC,EAAE;MAC5CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,QAAQ;IACjC,CAAC,CAAC,CACDS,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;MACZd,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEa,IAAI,CAAC;MACtC;MACA,IAAIA,IAAI,CAACX,KAAK,EAAE;QACZ;QACAY,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEF,IAAI,CAACX,KAAK,CAAC;MACjD;IACJ,CAAC,CAAC,CACDc,KAAK,CAAEC,KAAK,IAAK;MACdlB,OAAO,CAACkB,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAClC,CAAC,CAAC;EACN,CAAC;EAED,oBACItB,OAAA,CAACH,mBAAmB;IAAC0B,QAAQ,EAAC,yEAAyE;IAAAC,QAAA,eACnGxB,OAAA;MAAAwB,QAAA,gBACIxB,OAAA;QAAAwB,QAAA,EAAI;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrB5B,OAAA,CAACF,WAAW;QACR+B,SAAS,EAAE3B,cAAe;QAC1B4B,OAAO,EAAEA,CAAA,KAAM1B,OAAO,CAACkB,KAAK,CAAC,cAAc;MAAE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE9B,CAAC;AAACG,EAAA,GA1CI9B,eAAe;AA4CrB,eAAeA,eAAe;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}