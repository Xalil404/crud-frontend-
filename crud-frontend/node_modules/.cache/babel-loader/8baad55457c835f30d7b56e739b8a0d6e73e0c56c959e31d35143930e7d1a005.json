{"ast":null,"code":"var _jsxFileName = \"/Users/test/crud-frontend-/crud-frontend/src/components/auth/GoogleLoginPage.js\";\nimport React from 'react';\nimport { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GoogleLoginPage = () => {\n  const responseGoogle = response => {\n    console.log(response);\n    // Send user data to the backend\n    const userData = {\n      token: response.credential // Use response.credential for the token\n      // profile information is not directly available in this package, you may need to fetch it separately if required\n    };\n    fetch('http://127.0.0.1:8000/api/auth/google/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n      // Handle successful login (e.g., store token, redirect user)\n      if (data.message) {\n        // Redirect or perform additional actions here\n      }\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(GoogleOAuthProvider, {\n    clientId: \"17966200055-rc9cu06jutt8mo0cqob43vhnejvbltd4.apps.googleusercontent.com\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Google Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n        onSuccess: responseGoogle,\n        onError: error => console.error('Login Failed:', error),\n        cookiePolicy: 'single_host_origin'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_c = GoogleLoginPage;\nexport default GoogleLoginPage;\nvar _c;\n$RefreshReg$(_c, \"GoogleLoginPage\");","map":{"version":3,"names":["React","GoogleOAuthProvider","GoogleLogin","jsxDEV","_jsxDEV","GoogleLoginPage","responseGoogle","response","console","log","userData","token","credential","fetch","method","headers","body","JSON","stringify","then","res","json","data","message","catch","error","clientId","children","fileName","_jsxFileName","lineNumber","columnNumber","onSuccess","onError","cookiePolicy","_c","$RefreshReg$"],"sources":["/Users/test/crud-frontend-/crud-frontend/src/components/auth/GoogleLoginPage.js"],"sourcesContent":["import React from 'react';\nimport { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\n\nconst GoogleLoginPage = () => {\n    const responseGoogle = (response) => {\n        console.log(response);\n        // Send user data to the backend\n        const userData = {\n            token: response.credential, // Use response.credential for the token\n            // profile information is not directly available in this package, you may need to fetch it separately if required\n        };\n\n        fetch('http://127.0.0.1:8000/api/auth/google/', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(userData),\n        })\n        .then((res) => res.json())\n        .then((data) => {\n            console.log(data);\n            // Handle successful login (e.g., store token, redirect user)\n            if (data.message) {\n                // Redirect or perform additional actions here\n            }\n        })\n        .catch((error) => {\n            console.error('Error:', error);\n        });\n    };\n\n    return (\n        <GoogleOAuthProvider clientId=\"17966200055-rc9cu06jutt8mo0cqob43vhnejvbltd4.apps.googleusercontent.com\">\n            <div>\n                <h1>Google Login</h1>\n                <GoogleLogin\n                    onSuccess={responseGoogle}\n                    onError={(error) => console.error('Login Failed:', error)}\n                    cookiePolicy={'single_host_origin'}\n                />\n            </div>\n        </GoogleOAuthProvider>\n    );\n};\n\nexport default GoogleLoginPage;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,mBAAmB,EAAEC,WAAW,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvE,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAC1B,MAAMC,cAAc,GAAIC,QAAQ,IAAK;IACjCC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;IACrB;IACA,MAAMG,QAAQ,GAAG;MACbC,KAAK,EAAEJ,QAAQ,CAACK,UAAU,CAAE;MAC5B;IACJ,CAAC;IAEDC,KAAK,CAAC,wCAAwC,EAAE;MAC5CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,QAAQ;IACjC,CAAC,CAAC,CACDS,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;MACZd,OAAO,CAACC,GAAG,CAACa,IAAI,CAAC;MACjB;MACA,IAAIA,IAAI,CAACC,OAAO,EAAE;QACd;MAAA;IAER,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MACdjB,OAAO,CAACiB,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAClC,CAAC,CAAC;EACN,CAAC;EAED,oBACIrB,OAAA,CAACH,mBAAmB;IAACyB,QAAQ,EAAC,yEAAyE;IAAAC,QAAA,eACnGvB,OAAA;MAAAuB,QAAA,gBACIvB,OAAA;QAAAuB,QAAA,EAAI;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrB3B,OAAA,CAACF,WAAW;QACR8B,SAAS,EAAE1B,cAAe;QAC1B2B,OAAO,EAAGR,KAAK,IAAKjB,OAAO,CAACiB,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAE;QAC1DS,YAAY,EAAE;MAAqB;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE9B,CAAC;AAACI,EAAA,GAzCI9B,eAAe;AA2CrB,eAAeA,eAAe;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}